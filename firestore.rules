/**
 * @file Firebase Security Rules for PaintFlow Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for jobs, expenses, and cash flow,
 * ensuring that only the authenticated user can access their own data. Subcontractors are stored at the root level,
 * and UserProfiles are secured to their respective owners.
 *
 * @data_structure
 * - /users/{userId}: Stores user profile data, accessible only by the user themselves.
 * - /subcontractors/{subcontractorId}: Stores subcontractor data, accessible to any authenticated user.
 * - /users/{userId}/jobs/{jobId}: Stores job data, accessible only by the user who owns the job.
 * - /users/{userId}/jobs/{jobId}/expenses/{expenseId}: Stores expense data related to a job, accessible only by the user who owns the job and expense.
 * - /users/{userId}/jobs/{jobId}/cashFlow/{cashFlowId}: Stores cash flow data related to a job, accessible only by the user who owns the job and cash flow.
 *
 * @key_security_decisions
 * - User listing is explicitly disallowed.
 * - Subcontractors can be read by any authenticated user, but writes are disallowed.
 *
 * @denormalization_for_authorization N/A - User ID is implicit based on the path, so no denormalization is needed.
 *
 * @structural_segregation All user-specific data is stored under the /users/{userId} path, ensuring clear separation and ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the request is made by the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the existing owner of the resource.
     * @param {string} userId The user ID to compare against the resource data's userId.
     * @return {bool} True if the request is made by the existing owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can only access their own profile.
     * @deny (create) - If the userId does not match the auth UID.
     * @deny (get, update, delete) - If the user is not authenticated or the userId does not match the auth UID.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for subcontractors.
     * @path /subcontractors/{subcontractorId}
     * @allow (get, list) - Any authenticated user can read subcontractors.
     * @deny (create, update, delete) - No one can create, update, or delete subcontractors.
     * @principle Allows public read access but restricts write access.
     */
    match /subcontractors/{subcontractorId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for jobs.
     * @path /users/{userId}/jobs/{jobId}
     * @allow (create) - Authenticated user can create a job under their userId.
     * @allow (get, list, update, delete) - Authenticated user can only access their own jobs.
     * @deny (create, get, list, update, delete) - If the user is not authenticated or the userId does not match the auth UID.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/jobs/{jobId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for expenses.
     * @path /users/{userId}/jobs/{jobId}/expenses/{expenseId}
     * @allow (create) - Authenticated user can create an expense under their userId and jobId.
     * @allow (get, list, update, delete) - Authenticated user can only access their own expenses.
     * @deny (create, get, list, update, delete) - If the user is not authenticated or the userId does not match the auth UID.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/jobs/{jobId}/expenses/{expenseId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for cash flow.
     * @path /users/{userId}/jobs/{jobId}/cashFlow/{cashFlowId}
     * @allow (create) - Authenticated user can create a cash flow entry under their userId and jobId.
     * @allow (get, list, update, delete) - Authenticated user can only access their own cash flow entries.
     * @deny (create, get, list, update, delete) - If the user is not authenticated or the userId does not match the auth UID.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/jobs/{jobId}/cashFlow/{cashFlowId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}