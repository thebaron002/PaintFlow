/**
 * @fileoverview Firestore Security Rules for the project management application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict client-ownership model. Each client can only access their own data,
 * including projects, expenses, and income records associated with those projects.
 *
 * Data Structure:
 * The data is organized hierarchically under the `/clients/{clientId}` path.
 * Projects, expenses, and income are nested as subcollections under each client.
 *
 * Key Security Decisions:
 * - Clients can only access resources (projects, expenses, income) directly associated with their ID.
 * - The rules do not allow listing all clients or all projects across clients. List operations are only
 *   permitted within a specific client's scope.
 * - Authorization Independence is achieved via path-based ownership. Every document's path inherently
 *   contains the `clientId`, which is used for access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access only to the authenticated client.
     * @path /clients/{clientId}
     * @allow (get, create, update, delete) if the request is made by the client with matching clientId.
     * @deny (get, create, update, delete) if the request is made by another client or an unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if false; // Listing all clients is not permitted.
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isExistingOwner(clientId);
      allow delete: if isSignedIn() && isExistingOwner(clientId);
    }

    /**
     * @description Grants access only to the authenticated client for their projects.
     * @path /clients/{clientId}/projects/{projectId}
     * @allow (get, create, update, delete) if the request is made by the client with matching clientId.
     * @deny (get, create, update, delete) if the request is made by another client or an unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId}/projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if isSignedIn() && isOwner(clientId);
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isExistingOwner(clientId);
      allow delete: if isSignedIn() && isExistingOwner(clientId);
    }

    /**
     * @description Grants access only to the authenticated client for their project expenses.
     * @path /clients/{clientId}/projects/{projectId}/expenses/{expenseId}
     * @allow (get, create, update, delete) if the request is made by the client with matching clientId.
     * @deny (get, create, update, delete) if the request is made by another client or an unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId}/projects/{projectId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if isSignedIn() && isOwner(clientId);
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isExistingOwner(clientId);
      allow delete: if isSignedIn() && isExistingOwner(clientId);
    }

    /**
     * @description Grants access only to the authenticated client for their project income records.
     * @path /clients/{clientId}/projects/{projectId}/income/{incomeId}
     * @allow (get, create, update, delete) if the request is made by the client with matching clientId.
     * @deny (get, create, update, delete) if the request is made by another client or an unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId}/projects/{projectId}/income/{incomeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if isSignedIn() && isOwner(clientId);
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isExistingOwner(clientId);
      allow delete: if isSignedIn() && isExistingOwner(clientId);
    }
  }
}