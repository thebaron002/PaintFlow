/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict client-ownership model, ensuring that clients can only access data associated with their specific client ID.
 *
 * Data Structure:
 * - /clients/{clientId}: Stores client information.
 * - /clients/{clientId}/projects/{projectId}: Stores project assignments for each client.
 * - /clients/{clientId}/projects/{projectId}/expenses/{expenseId}: Stores expenses associated with a specific project for a client.
 * - /clients/{clientId}/projects/{projectId}/income/{incomeId}: Stores income records associated with a specific project for a client.
 *
 * Key Security Decisions:
 * - Clients can only create, read, update, and delete their own client document.
 * - Clients can only create, read, update, and delete projects, expenses, and income records associated with their client ID.
 * - Listing of all clients is disallowed.
 * - Data consistency between the path and the document's internal fields is enforced on create and update operations.
 *
 * Denormalization for Authorization:
 * - The `clientId` is part of the path for projects, expenses, and income, enabling direct access control based on the `clientId`. This avoids complex `get()` calls in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces client-ownership for the /clients/{clientId} document.
     * @path /clients/{clientId}
     * @allow (create) - Authenticated user with UID matching the clientId can create a client document.
     * @allow (get, update, delete) - Authenticated user with UID matching the clientId can get, update and delete the client document.
     * @deny (create) - Authenticated user with UID not matching the clientId cannot create a client document.
     * @deny (get, update, delete) - Authenticated user with UID not matching the clientId cannot get, update and delete the client document.
     * @principle Enforces document ownership for writes.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(clientId) {
        return isSignedIn() && request.auth.uid == clientId;
      }

      function isExistingOwner(clientId) {
          return isOwner(clientId) && resource != null;
      }

      allow get: if isOwner(clientId);
      allow list: if false;

      allow create: if isOwner(clientId) && request.resource.data.id == clientId;
      allow update: if isExistingOwner(clientId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Enforces client-ownership for the /clients/{clientId}/projects/{projectId} document.
     * @path /clients/{clientId}/projects/{projectId}
     * @allow (create) - Authenticated user with UID matching the clientId can create a project document.
     * @allow (get, list, update, delete) - Authenticated user with UID matching the clientId can get, list, update and delete the project document.
     * @deny (create) - Authenticated user with UID not matching the clientId cannot create a project document.
     * @deny (get, list, update, delete) - Authenticated user with UID not matching the clientId cannot get, list, update and delete the project document.
     * @principle Enforces document ownership for writes.
     */
    match /clients/{clientId}/projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(clientId) {
        return isSignedIn() && request.auth.uid == clientId;
      }

      function isExistingOwner(clientId) {
          return isOwner(clientId) && resource != null;
      }
      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId) && request.resource.data.clientId == clientId;
      allow update: if isExistingOwner(clientId) && request.resource.data.clientId == resource.data.clientId;
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Enforces client-ownership for the /clients/{clientId}/projects/{projectId}/expenses/{expenseId} document.
     * @path /clients/{clientId}/projects/{projectId}/expenses/{expenseId}
     * @allow (create) - Authenticated user with UID matching the clientId can create an expense document.
     * @allow (get, list, update, delete) - Authenticated user with UID matching the clientId can get, list, update and delete the expense document.
     * @deny (create) - Authenticated user with UID not matching the clientId cannot create an expense document.
     * @deny (get, list, update, delete) - Authenticated user with UID not matching the clientId cannot get, list, update and delete the expense document.
     * @principle Enforces document ownership for writes.
     */
    match /clients/{clientId}/projects/{projectId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(clientId) {
        return isSignedIn() && request.auth.uid == clientId;
      }

      function isExistingOwner(clientId) {
          return isOwner(clientId) && resource != null;
      }
      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId) && request.resource.data.projectId == projectId;
      allow update: if isExistingOwner(clientId) && request.resource.data.projectId == resource.data.projectId;
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Enforces client-ownership for the /clients/{clientId}/projects/{projectId}/income/{incomeId} document.
     * @path /clients/{clientId}/projects/{projectId}/income/{incomeId}
     * @allow (create) - Authenticated user with UID matching the clientId can create an income document.
     * @allow (get, list, update, delete) - Authenticated user with UID matching the clientId can get, list, update and delete the income document.
     * @deny (create) - Authenticated user with UID not matching the clientId cannot create an income document.
     * @deny (get, list, update, delete) - Authenticated user with UID not matching the clientId cannot get, list, update and delete the income document.
     * @principle Enforces document ownership for writes.
     */
    match /clients/{clientId}/projects/{projectId}/income/{incomeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(clientId) {
        return isSignedIn() && request.auth.uid == clientId;
      }
      function isExistingOwner(clientId) {
          return isOwner(clientId) && resource != null;
      }

      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId) && request.resource.data.projectId == projectId;
      allow update: if isExistingOwner(clientId) && request.resource.data.projectId == resource.data.projectId;
      allow delete: if isExistingOwner(clientId);
    }
  }
}