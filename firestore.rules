/**
 * @file Firebase Security Rules for PaintFlow application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for jobs, expenses, and cash flow data,
 * nested under user-specific paths. Subcontractor data is stored at the root level.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /subcontractors/{subcontractorId}: Stores subcontractor information.
 * - /users/{userId}/jobs/{jobId}: Stores job data, owned by the user.
 * - /users/{userId}/jobs/{jobId}/expenses/{expenseId}: Stores expenses related to a job, owned by the user.
 * - /users/{userId}/jobs/{jobId}/cashFlow/{cashFlowId}: Stores cash flow entries related to a job, owned by the user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Jobs, expenses, and cash flow entries are strictly owned by the user; only the owner can create, read, update, or delete them.
 * - Subcontractors can be accessed by any authenticated user, meaning that the list is public to authenticated users.
 *
 * Denormalization for Authorization:
 * - Jobs, expenses, and cash flow data are all stored under the user's path to allow for path-based authorization.
 *   This avoids costly `get()` calls to verify ownership.
 *
 * Structural Segregation:
 * - User-specific data (jobs, expenses, cash flow) is stored under the /users/{userId} path, ensuring private access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) request.auth.uid == userId
     * @allow (get, update, delete) request.auth.uid == userId
     * @deny (create) request.auth.uid != userId
     * @deny (get, update, delete) request.auth.uid != userId
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted for privacy reasons.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to read subcontractor data. Only authenticated users can create, update, and delete.
     * @path /subcontractors/{subcontractorId}
     * @allow (get, list) if isSignedIn();
     * @deny (create, update, delete) if !isSignedIn();
     * @allow (create) if isSignedIn();
     * @allow (update) if false;
     * @allow (delete) if false;
     * @principle Public read access for authenticated users, owner-only writes.
     */
    match /subcontractors/{subcontractorId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows the user to manage their own jobs.
     * @path /users/{userId}/jobs/{jobId}
     * @allow (create) request.auth.uid == userId
     * @allow (get, list, update, delete) request.auth.uid == userId
     * @deny (create) request.auth.uid != userId
     * @deny (get, list, update, delete) request.auth.uid != userId
     * @principle Enforces document ownership for all operations on jobs.
     */
    match /users/{userId}/jobs/{jobId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows the user to manage expenses associated with their jobs.
     * @path /users/{userId}/jobs/{jobId}/expenses/{expenseId}
     * @allow (create) request.auth.uid == userId
     * @allow (get, list, update, delete) request.auth.uid == userId
     * @deny (create) request.auth.uid != userId
     * @deny (get, list, update, delete) request.auth.uid != userId
     * @principle Enforces document ownership for all operations on expenses.
     */
    match /users/{userId}/jobs/{jobId}/expenses/{expenseId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows the user to manage cash flow entries for their jobs.
     * @path /users/{userId}/jobs/{jobId}/cashFlow/{cashFlowId}
     * @allow (create) request.auth.uid == userId
     * @allow (get, list, update, delete) request.auth.uid == userId
     * @deny (create) request.auth.uid != userId
     * @deny (get, list, update, delete) request.auth.uid != userId
     * @principle Enforces document ownership for all operations on cash flow entries.
     */
    match /users/{userId}/jobs/{jobId}/cashFlow/{cashFlowId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}