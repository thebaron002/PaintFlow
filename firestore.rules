/**
 * @fileoverview Firestore Security Rules for Project Management App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Only the
 * authenticated user corresponding to the `clientId` path segment can read or
 * write data at that location.
 *
 * Data Structure:
 * - /clients/{clientId}: Stores client profile information.
 * - /clients/{clientId}/projects/{projectId}: Stores projects associated with a client.
 * - /clients/{clientId}/projects/{projectId}/expenses/{expenseId}: Stores expenses for a project.
 * - /clients/{clientId}/projects/{projectId}/income/{incomeId}: Stores income for a project.
 *
 * Key Security Decisions:
 * - No public data or listing is allowed.
 * - All data access is restricted to the owner (client).
 * - Data consistency between the path and document fields is enforced on creation and update.
 * - No role-based access control (e.g., admin roles) is implemented.
 *
 * Denormalization for Authorization:
 * The `clientId` is present in the path for all subcollections, allowing for
 * efficient path-based authorization.  This avoids costly `get()` operations
 * to retrieve client information from parent documents.
 *
 * Structural Segregation:
 * All data is private to the client and stored under the `/clients/{clientId}`
 * path. There is no concept of public vs. private data, so structural
 * segregation is not applicable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a global function to check if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for all operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a global function to check if the authenticated user is the owner of the document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     */
    function isOwner(clientId) {
      return isSignedIn() && request.auth.uid == clientId;
    }

    /**
     * @description Defines a global function to check if the authenticated user is the owner of the document, and that the document exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     */
    function isExistingOwner(clientId) {
        return isOwner(clientId) && resource != null;
    }

    /**
     * @description Rules for the /clients/{clientId} collection.
     * @path /clients/{clientId}
     * @allow (create) - Authenticated user with UID matching the clientId can create a client profile.
     * @allow (get, list, update, delete) - Authenticated user with UID matching the clientId can access and modify their profile.
     * @deny (create, update, delete) - Any other user cannot create, update or delete.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId} {
      allow get: if isOwner(clientId);
      allow list: if false;
      allow create: if isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Rules for the /clients/{clientId}/projects/{projectId} collection.
     * @path /clients/{clientId}/projects/{projectId}
     * @allow (create) - Authenticated user with UID matching the clientId can create a project under their profile.
     * @allow (get, list, update, delete) - Authenticated user with UID matching the clientId can access and modify projects under their profile.
     * @deny (create, update, delete) - Any other user cannot create, update, or delete.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId}/projects/{projectId} {
      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Rules for the /clients/{clientId}/projects/{projectId}/expenses/{expenseId} collection.
     * @path /clients/{clientId}/projects/{projectId}/expenses/{expenseId}
     * @allow (create) - Authenticated user with UID matching the clientId can create an expense under their project.
     * @allow (get, list, update, delete) - Authenticated user with UID matching the clientId can access and modify expenses under their project.
     * @deny (create, update, delete) - Any other user cannot create, update or delete.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId}/projects/{projectId}/expenses/{expenseId} {
      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Rules for the /clients/{clientId}/projects/{projectId}/income/{incomeId} collection.
     * @path /clients/{clientId}/projects/{projectId}/income/{incomeId}
     * @allow (create) - Authenticated user with UID matching the clientId can create an income record under their project.
     * @allow (get, list, update, delete) - Authenticated user with UID matching the clientId can access and modify income records under their project.
     * @deny (create, update, delete) - Any other user cannot create, update or delete.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId}/projects/{projectId}/income/{incomeId} {
      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }
  }
}