/**
 * @file Firebase Security Rules for PaintFlow Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for jobs, expenses, and cash flow,
 *                  while subcontractors are managed at the root level. User profiles are self-owned.
 *                  Authorization independence is achieved through data denormalization.
 *
 * @data_structure The data is organized hierarchically:
 *                 - /users/{userId}: User profile information, owned by the user.
 *                 - /subcontractors/{subcontractorId}: Subcontractor information, managed at the root level.
 *                 - /users/{userId}/jobs/{jobId}: Jobs owned by a specific user.
 *                 - /users/{userId}/jobs/{jobId}/expenses/{expenseId}: Expenses related to a specific job, owned by the user.
 *                 - /users/{userId}/jobs/{jobId}/cashFlow/{cashFlowId}: Cash flow entries related to a specific job, owned by the user.
 *
 * @key_security_decisions
 *   - User listing is disallowed.
 *   - Subcontractors are publicly readable but only creatable/updatable/deletable by an admin(not implemented).
 *   - Jobs, expenses, and cash flow are strictly user-owned and not publicly accessible.
 *   - Data consistency between path parameters and document fields is enforced on create and update.
 *
 * @denormalization_for_authorization  The 'jobs', 'expenses', and 'cashFlow' subcollections under users are designed for authorization independence.
 *                                     Each document in these subcollections implicitly belongs to the 'userId' and/or 'jobId' specified in the path, and this
 *                                     relationship is enforced in the rules.
 *                                     This avoids the need for complex queries or `get()` calls to verify ownership.
 *
 * @structural_segregation  Private user data (jobs, expenses, cashflow) is stored under the `/users/{userId}` path, ensuring it's segregated from public data (not present in this application).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile documents, allowing only the authenticated user to read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile document with ID 'user_abc'.
     * @deny (create) User with UID 'user_abc' cannot create a profile document with ID 'user_xyz'.
     * @allow (get) User with UID 'user_abc' can read their own profile document with ID 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update their own profile document with ID 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete their own profile document with ID 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read profile document with ID 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update profile document with ID 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete profile document with ID 'user_abc'.
     * @principle Enforces document ownership for writes. Allows self-creation.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures subcontractor documents, allowing public read access and restricted write access to admins (not implemented in this version).
     * @path /subcontractors/{subcontractorId}
     * @allow (get) Any user can read subcontractor documents.
     * @allow (list) Any user can list subcontractor documents.
     * @deny (create) Non-admin users cannot create subcontractor documents.
     * @deny (update) Non-admin users cannot update subcontractor documents.
     * @deny (delete) Non-admin users cannot delete subcontractor documents.
     * @principle Allows public read access with restricted write access.
     */
    match /subcontractors/{subcontractorId} {
      allow get, list: if true;
      allow create: if false; // TODO: Implement admin check
      allow update: if false; // TODO: Implement admin check
      allow delete: if false; // TODO: Implement admin check
    }

    /**
     * @description Secures job documents, allowing only the owner (user) to read and write their own job data.
     * @path /users/{userId}/jobs/{jobId}
     * @allow (create) User with UID 'user_abc' can create a job document under /users/user_abc/jobs/{jobId}.
     * @deny (create) User with UID 'user_xyz' cannot create a job document under /users/user_abc/jobs/{jobId}.
     * @allow (get) User with UID 'user_abc' can read a job document under /users/user_abc/jobs/{jobId}.
     * @allow (update) User with UID 'user_abc' can update a job document under /users/user_abc/jobs/{jobId}.
     * @allow (delete) User with UID 'user_abc' can delete a job document under /users/user_abc/jobs/{jobId}.
     * @deny (get) User with UID 'user_xyz' cannot read a job document under /users/user_abc/jobs/{jobId}.
     * @deny (update) User with UID 'user_xyz' cannot update a job document under /users/user_abc/jobs/{jobId}.
     * @deny (delete) User with UID 'user_xyz' cannot delete a job document under /users/user_abc/jobs/{jobId}.
     * @principle Enforces document ownership for reads and writes. Validates relational integrity.
     */
    match /users/{userId}/jobs/{jobId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == jobId;
      allow update: if isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures expense documents, allowing only the owner (user) to read and write their own expense data related to a specific job.
     * @path /users/{userId}/jobs/{jobId}/expenses/{expenseId}
     * @allow (create) User with UID 'user_abc' can create an expense document under /users/user_abc/jobs/{jobId}/expenses/{expenseId}.
     * @deny (create) User with UID 'user_xyz' cannot create an expense document under /users/user_abc/jobs/{jobId}/expenses/{expenseId}.
     * @allow (get) User with UID 'user_abc' can read an expense document under /users/user_abc/jobs/{jobId}/expenses/{expenseId}.
     * @allow (update) User with UID 'user_abc' can update an expense document under /users/user_abc/jobs/{jobId}/expenses/{expenseId}.
     * @allow (delete) User with UID 'user_abc' can delete an expense document under /users/user_abc/jobs/{jobId}/expenses/{expenseId}.
     * @deny (get) User with UID 'user_xyz' cannot read an expense document under /users/user_abc/jobs/{jobId}/expenses/{expenseId}.
     * @deny (update) User with UID 'user_xyz' cannot update an expense document under /users/user_abc/jobs/{jobId}/expenses/{expenseId}.
     * @deny (delete) User with UID 'user_xyz' cannot delete an expense document under /users/user_abc/jobs/{jobId}/expenses/{expenseId}.
     * @principle Enforces document ownership for reads and writes. Validates relational integrity.
     */
    match /users/{userId}/jobs/{jobId}/expenses/{expenseId} {
       function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.jobId == jobId && request.resource.data.id == expenseId;
      allow update: if isExistingOwner(userId) && resource.data.jobId == request.resource.data.jobId && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures cash flow documents, allowing only the owner (user) to read and write their own cash flow data related to a specific job.
     * @path /users/{userId}/jobs/{jobId}/cashFlow/{cashFlowId}
     * @allow (create) User with UID 'user_abc' can create a cash flow document under /users/user_abc/jobs/{jobId}/cashFlow/{cashFlowId}.
     * @deny (create) User with UID 'user_xyz' cannot create a cash flow document under /users/user_abc/jobs/{jobId}/cashFlow/{cashFlowId}.
     * @allow (get) User with UID 'user_abc' can read a cash flow document under /users/user_abc/jobs/{jobId}/cashFlow/{cashFlowId}.
     * @allow (update) User with UID 'user_abc' can update a cash flow document under /users/user_abc/jobs/{jobId}/cashFlow/{cashFlowId}.
     * @allow (delete) User with UID 'user_abc' can delete a cash flow document under /users/user_abc/jobs/{jobId}/cashFlow/{cashFlowId}.
     * @deny (get) User with UID 'user_xyz' cannot read a cash flow document under /users/user_abc/jobs/{jobId}/cashFlow/{cashFlowId}.
     * @deny (update) User with UID 'user_xyz' cannot update a cash flow document under /users/user_abc/jobs/{jobId}/cashFlow/{cashFlowId}.
     * @deny (delete) User with UID 'user_xyz' cannot delete a cash flow document under /users/user_abc/jobs/{jobId}/cashFlow/{cashFlowId}.
     * @principle Enforces document ownership for reads and writes. Validates relational integrity.
     */
    match /users/{userId}/jobs/{jobId}/cashFlow/{cashFlowId} {
        function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.jobId == jobId && request.resource.data.id == cashFlowId;
      allow update: if isExistingOwner(userId) && resource.data.jobId == request.resource.data.jobId && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }
  }
}