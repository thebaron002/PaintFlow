/**
 * @file Firestore Security Rules
 * @core Philosophy: This ruleset enforces a strict user-ownership model, where clients can only access data associated with their own ID.
 * @data Structure:
 *   - /clients/{clientId}: Stores client information.
 *   - /clients/{clientId}/projects/{projectId}: Stores project information for each client.
 *   - /clients/{clientId}/projects/{projectId}/expenses/{expenseId}: Stores expense information for each project.
 *   - /clients/{clientId}/projects/{projectId}/income/{incomeId}: Stores income information for each project.
 * @key Security Decisions:
 *   - Clients can only list clients.
 *   - Clients can only access resources (projects, expenses, income) nested under their client ID.
 *   - No public listing of any collections other than clients collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /clients collection, ensuring clients can only access their own data.
     * @path /clients/{clientId}
     * @allow (create, get, update, delete, list) - A client with UID 'user123' can create, read, update, and delete their own client document at /clients/user123 if request.auth.uid == 'user123'.
     * @deny (create, get, update, delete) - A client with UID 'user456' cannot access the client document at /clients/user123 because request.auth.uid != 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /clients/{clientId} {
      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if true; // Open access to list clients

      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isOwner(clientId) && resource.data != null;
      allow delete: if isSignedIn() && isOwner(clientId) && resource.data != null;
    }

    /**
     * @description Secures the /clients/{clientId}/projects collection, ensuring clients can only access projects associated with their client ID.
     * @path /clients/{clientId}/projects/{projectId}
     * @allow (create, get, update, delete, list) - A client with UID 'user123' can create, read, update, and delete projects under /clients/user123/projects/project1 if request.auth.uid == 'user123'.
     * @deny (create, get, update, delete, list) - A client with UID 'user456' cannot access projects under /clients/user123/projects/project1 because request.auth.uid != 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /clients/{clientId}/projects/{projectId} {
      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if isSignedIn() && isOwner(clientId);

      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isOwner(clientId) && resource.data != null;
      allow delete: if isSignedIn() && isOwner(clientId) && resource.data != null;
    }

    /**
     * @description Secures the /clients/{clientId}/projects/{projectId}/expenses collection, ensuring clients can only access expenses associated with their client ID and project ID.
     * @path /clients/{clientId}/projects/{projectId}/expenses/{expenseId}
     * @allow (create, get, update, delete, list) - A client with UID 'user123' can create, read, update, and delete expenses under /clients/user123/projects/project1/expenses/expense1 if request.auth.uid == 'user123'.
     * @deny (create, get, update, delete, list) - A client with UID 'user456' cannot access expenses under /clients/user123/projects/project1/expenses/expense1 because request.auth.uid != 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /clients/{clientId}/projects/{projectId}/expenses/{expenseId} {
      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if isSignedIn() && isOwner(clientId);

      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isOwner(clientId) && resource.data != null;
      allow delete: if isSignedIn() && isOwner(clientId) && resource.data != null;
    }

    /**
     * @description Secures the /clients/{clientId}/projects/{projectId}/income collection, ensuring clients can only access income records associated with their client ID and project ID.
     * @path /clients/{clientId}/projects/{projectId}/income/{incomeId}
     * @allow (create, get, update, delete, list) - A client with UID 'user123' can create, read, update, and delete income records under /clients/user123/projects/project1/income/income1 if request.auth.uid == 'user123'.
     * @deny (create, get, update, delete, list) - A client with UID 'user456' cannot access income records under /clients/user123/projects/project1/income/income1 because request.auth.uid != 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /clients/{clientId}/projects/{projectId}/income/{incomeId} {
      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if isSignedIn() && isOwner(clientId);

      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isOwner(clientId) && resource.data != null;
      allow delete: if isSignedIn() && isOwner(clientId) && resource.data != null;
    }
  }
}