/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for data access within the PaintFlow application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /subcontractors/{subcontractorId}: Stores subcontractor information, globally accessible.
 * - /users/{userId}/jobs/{jobId}: Stores job information, owned by a specific user.
 * - /users/{userId}/jobs/{jobId}/expenses/{expenseId}: Stores expense information related to a specific job, owned by a user.
 * - /users/{userId}/jobs/{jobId}/cashFlow/{cashFlowId}: Stores cash flow information related to a specific job, owned by a user.
 *
 * Key Security Decisions:
 * - User profiles can only be read and written by the owning user.
 * - Subcontractors are globally accessible (read/write).
 * - Jobs, expenses, and cash flow are strictly user-owned and nested under the /users/{userId} path.
 * - Listing of subcontractors is allowed for all users.
 * - Listing of Jobs, Expenses and Cashflow documents is restricted to the owning user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile if request.auth.uid == 'user_abc'.
     * @allow (get) User with UID 'user_abc' can read their own profile if request.auth.uid == 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update their own profile if request.auth.uid == 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete their own profile if request.auth.uid == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read 'user_abc' profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows anyone to read and write subcontractor information.
     * @path /subcontractors/{subcontractorId}
     * @allow (create) Any authenticated user can create a subcontractor.
     * @allow (get) Any authenticated user can read a subcontractor.
     * @allow (update) Any authenticated user can update a subcontractor.
     * @allow (delete) Any authenticated user can delete a subcontractor.
     * @deny (create) Unauthenticated users cannot create subcontractors.
     * @principle Allows public read and write access to subcontractor data.
     */
    match /subcontractors/{subcontractorId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows users to manage their own jobs.
     * @path /users/{userId}/jobs/{jobId}
     * @allow (create) User with UID 'user_abc' can create a job under their ID.
     * @allow (get) User with UID 'user_abc' can read a job under their ID.
     * @allow (update) User with UID 'user_abc' can update a job under their ID.
     * @allow (delete) User with UID 'user_abc' can delete a job under their ID.
     * @deny (create) User with UID 'user_xyz' cannot create a job under 'user_abc' ID.
     * @deny (get) User with UID 'user_xyz' cannot read a job under 'user_abc' ID.
     * @principle Enforces document ownership for all operations on jobs.
     */
    match /users/{userId}/jobs/{jobId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return (isOwner(userId) && resource != null);
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage expenses related to their jobs.
     * @path /users/{userId}/jobs/{jobId}/expenses/{expenseId}
     * @allow (create) User with UID 'user_abc' can create an expense under their job.
     * @allow (get) User with UID 'user_abc' can read an expense under their job.
     * @allow (update) User with UID 'user_abc' can update an expense under their job.
     * @allow (delete) User with UID 'user_abc' can delete an expense under their job.
     * @deny (create) User with UID 'user_xyz' cannot create an expense under 'user_abc's job.
     * @deny (get) User with UID 'user_xyz' cannot read an expense under 'user_abc's job.
     * @principle Enforces document ownership for all operations on expenses.
     */
    match /users/{userId}/jobs/{jobId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return (isOwner(userId) && resource != null);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage cash flow entries related to their jobs.
     * @path /users/{userId}/jobs/{jobId}/cashFlow/{cashFlowId}
     * @allow (create) User with UID 'user_abc' can create a cash flow entry under their job.
     * @allow (get) User with UID 'user_abc' can read a cash flow entry under their job.
     * @allow (update) User with UID 'user_abc' can update a cash flow entry under their job.
     * @allow (delete) User with UID 'user_abc' can delete a cash flow entry under their job.
     * @deny (create) User with UID 'user_xyz' cannot create a cash flow entry under 'user_abc's job.
     * @deny (get) User with UID 'user_xyz' cannot read a cash flow entry under 'user_abc's job.
     * @principle Enforces document ownership for all operations on cash flow entries.
     */
    match /users/{userId}/jobs/{jobId}/cashFlow/{cashFlowId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return (isOwner(userId) && resource != null);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}