/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for Clients, Projects, Expenses, and Income, ensuring that users can only access data associated with their specific Client ID.
 *
 * Data Structure:
 * - /clients/{clientId}: Stores client information, accessible only by the client with the matching ID.
 * - /clients/{clientId}/projects/{projectId}: Stores project information, accessible only by the client with the matching ID.
 * - /clients/{clientId}/projects/{projectId}/expenses/{expenseId}: Stores expense information, accessible only by the client with the matching ID.
 * - /clients/{clientId}/projects/{projectId}/income/{incomeId}: Stores income information, accessible only by the client with the matching ID.
 *
 * Key Security Decisions:
 * - User-owned data: All data is strictly scoped to the authenticated user's Client ID.
 * - Denormalization: The `clientId` is implicitly denormalized into the path for all subcollections, simplifying authorization rules.
 * - No User Listing: Listing all users is not permitted.
 * - Authorization Independence: Rules are designed to avoid `get()` calls for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to client information. Only the client with the matching ID can read or write their own data.
     * @path /clients/{clientId}
     * @allow (create) User with UID 'testUserId' can create a client document with ID 'testUserId'.
     * @allow (get) User with UID 'testUserId' can retrieve a client document with ID 'testUserId'.
     * @allow (update) User with UID 'testUserId' can update a client document with ID 'testUserId'.
     * @allow (delete) User with UID 'testUserId' can delete a client document with ID 'testUserId'.
     * @deny (create) User with UID 'anotherUserId' cannot create a client document with ID 'testUserId'.
     * @deny (get) User with UID 'anotherUserId' cannot retrieve a client document with ID 'testUserId'.
     * @deny (update) User with UID 'anotherUserId' cannot update a client document with ID 'testUserId'.
     * @deny (delete) User with UID 'anotherUserId' cannot delete a client document with ID 'testUserId'.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId} {
      function isOwner(clientId) {
        return request.auth != null && request.auth.uid == clientId;
      }
      function isExistingOwner(clientId) {
        return isOwner(clientId) && resource != null;
      }
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Manages access to project data for a specific client. Only the associated client can read or write project data.
     * @path /clients/{clientId}/projects/{projectId}
     * @allow (create) User with UID 'testClientId' can create a project under /clients/testClientId/projects/testProjectId.
     * @allow (get) User with UID 'testClientId' can retrieve a project under /clients/testClientId/projects/testProjectId.
     * @allow (update) User with UID 'testClientId' can update a project under /clients/testClientId/projects/testProjectId.
     * @allow (delete) User with UID 'testClientId' can delete a project under /clients/testClientId/projects/testProjectId.
     * @deny (create) User with UID 'anotherClientId' cannot create a project under /clients/testClientId/projects/testProjectId.
     * @deny (get) User with UID 'anotherClientId' cannot retrieve a project under /clients/testClientId/projects/testProjectId.
     * @deny (update) User with UID 'anotherClientId' cannot update a project under /clients/testClientId/projects/testProjectId.
     * @deny (delete) User with UID 'anotherClientId' cannot delete a project under /clients/testClientId/projects/testProjectId.
     * @principle Enforces client-specific ownership for all project data.
     */
    match /clients/{clientId}/projects/{projectId} {
      function isOwner(clientId) {
        return request.auth != null && request.auth.uid == clientId;
      }
      function isExistingOwner(clientId) {
        return isOwner(clientId) && resource != null;
      }
      allow get: if true;
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Manages access to expense data for a specific project of a client. Only the associated client can read or write expense data.
     * @path /clients/{clientId}/projects/{projectId}/expenses/{expenseId}
     * @allow (create) User with UID 'testClientId' can create an expense under /clients/testClientId/projects/testProjectId/expenses/testExpenseId.
     * @allow (get) User with UID 'testClientId' can retrieve an expense under /clients/testClientId/projects/testProjectId/expenses/testExpenseId.
     * @allow (update) User with UID 'testClientId' can update an expense under /clients/testClientId/projects/testProjectId/expenses/testExpenseId.
     * @allow (delete) User with UID 'testClientId' can delete an expense under /clients/testClientId/projects/testProjectId/expenses/testExpenseId.
     * @deny (create) User with UID 'anotherClientId' cannot create an expense under /clients/testClientId/projects/testProjectId/expenses/testExpenseId.
     * @deny (get) User with UID 'anotherClientId' cannot retrieve an expense under /clients/testClientId/projects/testProjectId/expenses/testExpenseId.
     * @deny (update) User with UID 'anotherClientId' cannot update an expense under /clients/testClientId/projects/testProjectId/expenses/testExpenseId.
     * @deny (delete) User with UID 'anotherClientId' cannot delete an expense under /clients/testClientId/projects/testProjectId/expenses/testExpenseId.
     * @principle Enforces client-specific ownership for all expense data.
     */
    match /clients/{clientId}/projects/{projectId}/expenses/{expenseId} {
      function isOwner(clientId) {
        return request.auth != null && request.auth.uid == clientId;
      }
      function isExistingOwner(clientId) {
        return isOwner(clientId) && resource != null;
      }
      allow get: if true;
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Manages access to income data for a specific project of a client. Only the associated client can read or write income data.
     * @path /clients/{clientId}/projects/{projectId}/income/{incomeId}
     * @allow (create) User with UID 'testClientId' can create income under /clients/testClientId/projects/testProjectId/income/testIncomeId.
     * @allow (get) User with UID 'testClientId' can retrieve income under /clients/testClientId/projects/testProjectId/income/testIncomeId.
     * @allow (update) User with UID 'testClientId' can update income under /clients/testClientId/projects/testProjectId/income/testIncomeId.
     * @allow (delete) User with UID 'testClientId' can delete income under /clients/testClientId/projects/testProjectId/income/testIncomeId.
     * @deny (create) User with UID 'anotherClientId' cannot create income under /clients/testClientId/projects/testProjectId/income/testIncomeId.
     * @deny (get) User with UID 'anotherClientId' cannot retrieve income under /clients/testClientId/projects/testProjectId/income/testIncomeId.
     * @deny (update) User with UID 'anotherClientId' cannot update income under /clients/testClientId/projects/testProjectId/income/testIncomeId.
     * @deny (delete) User with UID 'anotherClientId' cannot delete income under /clients/testClientId/projects/testProjectId/income/testIncomeId.
     * @principle Enforces client-specific ownership for all income data.
     */
    match /clients/{clientId}/projects/{projectId}/income/{incomeId} {
      function isOwner(clientId) {
        return request.auth != null && request.auth.uid == clientId;
      }
      function isExistingOwner(clientId) {
        return isOwner(clientId) && resource != null;
      }
      allow get: if true;
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Denies listing of the /jobs collection. This collection does not exist in the provided data model and therefore should be denied by default.
     * @path /jobs
     * @deny (list) Any user, regardless of authentication status, is denied listing access to the /jobs collection.
     * @principle Explicitly denies access to a collection that is not part of the data model.
     */
    match /jobs {
       allow get: if false;
       allow list: if false;
       allow create: if false;
       allow update: if false;
       allow delete: if false;
    }
  }
}